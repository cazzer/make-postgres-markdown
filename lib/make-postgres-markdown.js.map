{"version":3,"sources":["../src/make-postgres-markdown.js"],"names":["d","Debug","program","version","option","parse","process","argv","console","time","ignore","RegExp","schema","then","db","markdown","schemas","get","tables","push","h1","name","table","exec","h2","comment","p","markdownTable","headers","rows","column","columns","type","renderConstraints","enumValues","join","default","output","fs","writeFileSync","timeEnd","constraints","allowNull","constraintName","constraint","foreignKeyConstraints","referencedTable","length"],"mappings":"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","file":"make-postgres-markdown.js","sourcesContent":["\n\nimport Debug from 'debug'\nimport program from 'commander'\nimport fs from 'fs'\nimport json2md from 'json2md'\nimport pgStructure from 'pg-structure'\n\nconst d = new Debug('make-postgres-markdown')\n\nprogram\n  .version('0.1.0')\n  .option('-h, --host [host]', 'Host', 'localhost')\n  .option('-p, --port [port]', 'Port', 5432)\n  .option('-d, --database [database]', 'Database', 'localhost')\n  .option('-s, --schema [schema]', 'Schema', 'public')\n  .option('-u, --user [user]', 'User', 'postgres')\n  .option('-W, --password [password]', 'Password')\n  .option('-o, --output [output]', 'Output file name', 'index.html.md')\n  .option('-i, --ignore <ignore>', 'Pattern of objects to ignore')\n  .parse(process.argv)\n\nconsole.time('make-postgres-markdown')\nd('Parsing schema')\n\nconst ignore = program.ignore\n  ? new RegExp(program.ignore)\n  : false\n\npgStructure(program, [program.schema])\n  .then(db => {\n    d('Building JSON representation...')\n    const markdown = []\n    const schema = db.schemas.get('public')\n    const tables = schema.tables\n\n    d('tables')\n    markdown.push({ h1: 'Tables' })\n    for (let [name, table] of tables) {\n      if (ignore && ignore.exec(name)) {\n        continue\n      }\n\n      markdown.push({ h2: name })\n      if (table.comment) {\n        markdown.push({ p: table.comment })\n      }\n\n      const markdownTable = {\n        headers: [\n          'column',\n          'type',\n          'constraints',\n          'comment',\n          'values',\n          'default'\n        ],\n        rows: []\n      }\n\n      for (let [name, column] of table.columns) {\n        markdownTable.rows.push([\n          name || '',\n          column.type || '',\n          renderConstraints(column) || '',\n          column.comment || '',\n          column.enumValues ? column.enumValues.join(', ') : '',\n          column.default || ''\n        ])\n      }\n      markdown.push({ table: markdownTable })\n    }\n\n    d('Converting JSON to markdown')\n    const output = json2md(markdown)\n\n    d('Writing output')\n    fs.writeFileSync(program.output, `---\ntitle: Database Documentation\n\nsearch: true\n---\n\n${output}\n    `)\n\n    d('Finished')\n    console.timeEnd('make-postgres-markdown')\n  })\n\nfunction renderConstraints(column) {\n  const constraints = []\n\n  if (!column.allowNull) {\n    constraints.push('NOT NULL')\n  }\n\n  for (let [constraintName, constraint] of column.foreignKeyConstraints) {\n    for (let [name, column] of constraint.columns) {\n      constraints.push(`[${name}](#${constraint.referencedTable.name})`)\n    }\n  }\n\n  return constraints.length && constraints.join(', ')\n}\n"]}